// Library: meter, Android Micro Benchmarking

buildscript {
    repositories {
//        jcenter()
//        mavenLocal()
        mavenCentral()
        /* ATTACH CUSTOME BUILDS OF GRADLE PLUGINS FROM '~/gradle/prlugins' folder */
//        flatDir { dirs rootProject.projectDir.toString() + '/gradle/plugins' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
        /* https://github.com/kt3k/coveralls-gradle-plugin */
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:${CoverallsVersion}"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.kt3k.coveralls'

/* DEFINE REPOSITORY WITH LATEST ROBOLECTRIC VERSION */
repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    /* =========================== */
    /*         DEBUG/RELEASE       */
    /* =========================== */
    compile fileTree(dir: 'libs', includes: ['*.jar'])

    /* =========================== */
    /*         UNIT TESTING        */
    /* =========================== */
    if (useTesting) {
        // unit tests libs. Rule: repeated Libs should be excluded.
        androidTestCompile fileTree(dir: 'src/tests/libs', include: '*.jar')

        /* UNIT TESTS HAS DEPENDENCY ON SUPPORT LIB, SO INCLUDE IT MANUALLY FOR CONTROLLING THE VERSION OF IT */
        androidTestCompile "com.android.support:support-v4:${androidSupportLib}"

        /* Hamcrest (v1.4) */
        androidTestCompile 'org.hamcrest:hamcrest-integration:+',
                'org.hamcrest:hamcrest-core:+',
                'org.hamcrest:hamcrest-library:+'

        /* Mockito (v2.0.2-beta) */
        androidTestCompile 'org.mockito:mockito-core:+',
                'com.google.dexmaker:dexmaker-mockito:+'

        /* jUnit (v4.12) */
        androidTestCompile('junit:junit:4.12') { exclude module: 'hamcrest-core' }
    }
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    // Android Manifest generation options
    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        /*useJack true*/

        versionCode 1
        versionName "1.0"

        if (useTesting) {
            /* default unit testing runner */
            testInstrumentationRunner "android.test.InstrumentationTestRunner"
        }
    }

    /* be specific about JaCoCo version. */
    jacoco {
        version JaCoCoVersion
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            shrinkResources false /* incompatible with useJack !!! */
        }
        release {
            minifyEnabled false
            shrinkResources false /* incompatible with useJack !!! */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest.setRoot('src/tests')
        androidTest {
            // default path is '~/java'
            java.srcDirs = ['src/tests/java']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    /* EXCLUDE SOME UNNEEDED FILES FROM PACKAGE */
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude '.readme'
        exclude '.README'
    }
}

coveralls.jacocoReportPath = 'build/outputs/reports/coverage/debug/report.xml'

// set output binary version. format: {versionName}.{versionCode}.{gitRevision}
version = android.defaultConfig.versionName + "." + android.defaultConfig.versionCode + ".${GIT_REVISION}"